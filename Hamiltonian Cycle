n = 5  # Number of vertices in the graph

# Adjacency matrix
G = [
    [0, 1, 1, 0, 1],
    [1, 0, 1, 1, 0],
    [1, 1, 0, 1, 0],
    [0, 1, 1, 0, 1],
    [1, 0, 0, 1, 0]
]

x = [0] * (n + 1)  # store current Hamiltonian path
x[1] = 1
found = False  # track if any Hamiltonian cycle exists

def NextValue(k):
    while True:
        x[k] = (x[k] + 1) % (n + 1)  # next vertex
        if x[k] == 0:
            return
        if G[x[k - 1] - 1][x[k] - 1] != 0:
            for j in range(1, k):
                if x[j] == x[k]:
                    break
            else:
                if (k < n) or (k == n and G[x[n] - 1][x[1] - 1] != 0):
                    return

def Hamiltonian(k):
    global found
    while True:
        NextValue(k)
        if x[k] == 0:
            return
        if k == n:
            print_cycle()
            found = True
        else:
            Hamiltonian(k + 1)

def print_cycle():
    vertex_labels = ['T', 'M', 'S', 'H', 'C']
    path_str = ' -> '.join(vertex_labels[x[i] - 1] for i in range(1, n + 1))
    path_str += ' -> ' + vertex_labels[x[1] - 1]
    print(path_str)

print("Hamiltonian cycles for the given city graph:")
Hamiltonian(2)
if not found:
    print("No Hamiltonian Cycle exists.")
