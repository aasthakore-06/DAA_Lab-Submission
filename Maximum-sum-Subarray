def max_subarray_with_constraint(resources, constraint):
def helper(left, right):
if left > right:
return (0, [])
if left == right:
return (resources[left], [resources[left]]) if resources[left] <= constraint else (0, [])
mid = (left + right) // 2

# Recurse on left and right halves
left_sum, left_sub = helper(left, mid)
right_sum, right_sub = helper(mid + 1, right)

# Cross-mid subarray
max_cross_sum = 0
best_cross_sub = []

# Build left prefix sums from mid to left
left_prefix = []
sum_left = 0
for i in range(mid, left - 1, -1):
sum_left += resources[i]
if sum_left <= constraint:
left_prefix.append((sum_left, i, mid))

# Build right prefix sums from mid+1 to right
right_prefix = []
sum_right = 0

for j in range(mid + 1, right + 1):
sum_right += resources[j]
if sum_right <= constraint:
right_prefix.append((sum_right, mid + 1, j))

# Combine left and right
for l_sum, l_start, l_end in left_prefix:
for r_sum, r_start, r_end in right_prefix:
total = l_sum + r_sum
if total <= constraint and total > max_cross_sum:
max_cross_sum = total
best_cross_sub = resources[l_start:l_end + 1] + resources[r_start:r_end + 1]

max_sum = max(left_sum, right_sum, max_cross_sum)
if max_sum == left_sum:
return (left_sum, left_sub)
elif max_sum == right_sum:
return (right_sum, right_sub)
else:
return (max_cross_sum, best_cross_sub)

if not resources or constraint <= 0:
return (0, [])
return helper(0, len(resources) - 1)
if __name__ == "__main__":
test_cases = [
([2, 1, 3, 4], 5),
([2, 2, 2, 2], 4),
([1, 5, 2, 3], 5),
([6, 7, 8], 5),
([1, 2, 3, 2, 1], 5),
([1, 1, 1, 1, 1], 4),
([4, 2, 3, 1], 5),
([], 10),
([1, 2, 3], 0),
(list(range(1, 100001)), 10**9)
]
for idx, (resources, constraint) in enumerate(test_cases, 1):
max_sum, best_subarray = max_subarray_with_constraint(resources, constraint)
print(f"Test Case {idx}:")
print(f"Resources: {resources[:10]}{'...' if len(resources) > 10 else ''}")
print(f"Constraint: {constraint}")
print(f"Maximum Sum: {max_sum}")
print(f"Best Subarray: {best_subarray}\n")
