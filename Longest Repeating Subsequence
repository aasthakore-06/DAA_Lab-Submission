def lrs(s):
    n = len(s)
    matrix = [[(0, 'H') for _ in range(n + 1)] for _ in range(n + 1)]
    for i in range(1, n + 1):
        for j in range(1, n + 1):
            if s[i - 1] == s[j - 1] and i != j:
                length = matrix[i - 1][j - 1][0] + 1
                direction = 'd'
            else:
                if matrix[i - 1][j][0] >= matrix[i][j - 1][0]:
                    length = matrix[i - 1][j][0]
                    direction = 'u'
                else:
                    length = matrix[i][j - 1][0]
                    direction = 's'
            matrix[i][j] = (length, direction)
    return matrix

# Reconstruct LRS from the matrix
def reconstruct_lrs(matrix, s):
    i = j = len(s)
    lrs = []
    while i > 0 and j > 0:
        length, direction = matrix[i][j]
        if direction == 'd':
            lrs.append(s[i - 1])
            i -= 1
            j -= 1
        elif direction == 'u':
            i -= 1
        else:  # direction == 's'
            j -= 1
    return ''.join(reversed(lrs))

s = "AABCBDC"
matrix = lrs(s)
for row in matrix:
    print([f"{length}{direction}" for length, direction in row])

print("LRS:", reconstruct_lrs(matrix, s))
